//go:build go1.22

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version (devel) DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	"libdb.so/e2clicker/services/user"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for NotificationType.
const (
	AccountNoticeMessage   NotificationType = "account_notice_message"
	ReminderMessage        NotificationType = "reminder_message"
	WebPushExpiringMessage NotificationType = "web_push_expiring_message"
	WelcomeMessage         NotificationType = "welcome_message"
)

// Defines values for ExportDosesParamsAccept.
const (
	ExportDosesParamsAcceptApplicationJSON ExportDosesParamsAccept = "application/json"
	ExportDosesParamsAcceptTextCsv         ExportDosesParamsAccept = "text/csv"
)

// Defines values for ImportDosesParamsContentType.
const (
	ImportDosesParamsContentTypeApplicationJSON ImportDosesParamsContentType = "application/json"
	ImportDosesParamsContentTypeTextCsv         ImportDosesParamsContentType = "text/csv"
)

// PushDeviceID A short ID associated with the device that the push subscription is for This is used to identify the device when updating its push subscription later on.
// Realistically, this will be handled as an opaque random string generated on the device side, so the server has no way to correlate  it with any fingerprinting.
// The recommended way to generate this string in JavaScript is:
// ```js crypto.randomUUID().slice(0, 8) ```
type PushDeviceID = string

// NotificationType The type of notification:
//
//   - `welcome_message` is sent to welcome the user. Realistically, it is
//     used as a test message.
//   - `reminder_message` is sent to remind the user of their hormone dose.
//   - `account_notice_message` is sent to notify the user that they need
//     to check their account.
//   - `web_push_expiring_message` is sent to notify the user that their
//     web push subscription is expiring.
type NotificationType string

// CustomNotifications Custom notifications that the user can override with. The object keys are the notification types.
type CustomNotifications map[string]NotificationMessage

// DeliveryMethod defines model for DeliveryMethod.
type DeliveryMethod struct {
	// ID A short string representing the delivery method. This is what goes into the DeliveryMethod fields.
	ID string `json:"id"`

	// Units The units of the delivery method.
	Units string `json:"units"`

	// Name The full name of the delivery method.
	Name string `json:"name"`

	// Description A description of the delivery method.
	Description string `json:"description,omitempty"`
}

// Dosage defines model for Dosage.
type Dosage struct {
	// DeliveryMethod The delivery method to use.
	DeliveryMethod string `json:"deliveryMethod"`

	// Dose The dosage amount.
	Dose float32 `json:"dose"`

	// Interval The interval between doses in days.
	Interval float64 `json:"interval"`

	// Concurrence The number of estrogen patches on the body at once. Only relevant if delivery method is patch.
	Concurrence *int `json:"concurrence,omitempty"`
}

// DosageHistory defines model for DosageHistory.
type DosageHistory = []Dose

// DosageHistoryCSV The CSV format of the user's dosage history.
type DosageHistoryCSV = string

// Dose A dose of medication in time.
type Dose struct {
	// DeliveryMethod The delivery method used.
	DeliveryMethod string `json:"deliveryMethod"`

	// Dose The dosage amount.
	Dose float32 `json:"dose"`

	// TakenAt The time the dosage was taken.
	TakenAt time.Time `json:"takenAt"`

	// TakenOffAt The time the dosage was taken off. This is only relevant for patch delivery methods.
	TakenOffAt *time.Time `json:"takenOffAt,omitempty"`

	// Comment A comment about the dosage, if any.
	Comment *string `json:"comment,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional details about the error. Ignored if [errors] is used.
	Details *interface{} `json:"details,omitempty"`

	// Errors An array of errors that caused this error. If this is populated, then [details] is omitted.
	Errors []Error `json:"errors,omitempty"`

	// Internal Whether the error is internal
	Internal *bool `json:"internal,omitempty"`

	// InternalCode An internal code for the error (useless for clients)
	InternalCode *string `json:"internalCode,omitempty"`

	// Message A message describing the error
	Message string `json:"message"`
}

// Locale A locale identifier.
type Locale = user.Locale

// Notification defines model for Notification.
type Notification struct {
	// Type The type of notification:
	//
	//   - `welcome_message` is sent to welcome the user. Realistically, it is
	//     used as a test message.
	//   - `reminder_message` is sent to remind the user of their hormone dose.
	//   - `account_notice_message` is sent to notify the user that they need
	//     to check their account.
	//   - `web_push_expiring_message` is sent to notify the user that their
	//     web push subscription is expiring.
	Type NotificationType `json:"type"`

	// Message The message of the notification.
	Message NotificationMessage `json:"message"`

	// Username The username of the user to send the notification to.
	Username string `json:"username"`
}

// NotificationMessage The message of the notification. This is derived from the notification type but can be overridden by the user.
type NotificationMessage struct {
	// Title The title of the notification.
	Title string `json:"title"`

	// Message The message of the notification.
	Message string `json:"message"`
}

// PushInfo This is returned by the server and contains information that the client would need to subscribe to push notifications.
type PushInfo struct {
	// ApplicationServerKey A Base64-encoded string or ArrayBuffer containing an ECDSA P-256 public key that the push server will use to authenticate your application server. If specified, all messages from your application server must use the VAPID authentication scheme, and include a JWT signed with the corresponding private key. This key IS NOT the same ECDH key that you use to encrypt the data. For more information, see "Using VAPID with WebPush".
	ApplicationServerKey string `json:"applicationServerKey"`
}

// PushSubscription The configuration for a push notification subscription.
// This is the object that is returned by calling PushSubscription.toJSON(). More information can be found at: https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON
type PushSubscription struct {
	// DeviceID A short ID associated with the device that the push subscription is for This is used to identify the device when updating its push subscription later on.
	// Realistically, this will be handled as an opaque random string generated on the device side, so the server has no way to correlate  it with any fingerprinting.
	// The recommended way to generate this string in JavaScript is:
	// ```js crypto.randomUUID().slice(0, 8) ```
	DeviceID PushDeviceID `json:"deviceID"`

	// Endpoint The endpoint to send the notification to.
	Endpoint string `json:"endpoint"`

	// ExpirationTime The time at which the subscription expires. This is the time when the subscription will be automatically deleted by the browser.
	ExpirationTime time.Time `json:"expirationTime,omitempty"`

	// Keys The VAPID keys to encrypt the push notification.
	Keys struct {
		// P256Dh An Elliptic curve Diffie–Hellman public key on the P-256 curve (that is, the NIST secp256r1 elliptic curve). The resulting key is an uncompressed point in ANSI X9.62 format.
		P256Dh string `json:"p256dh"`

		// Auth An authentication secret, as described in Message Encryption for Web Push.
		Auth string `json:"auth"`
	} `json:"keys"`
}

// ReturnedNotificationMethods defines model for ReturnedNotificationMethods.
type ReturnedNotificationMethods struct {
	WebPush *[]ReturnedPushSubscription `json:"webPush,omitempty"`
}

// ReturnedPushSubscription Similar to a [PushSubscription], but specifically for returning to the user. This type contains no secrets.
type ReturnedPushSubscription struct {
	DeviceID PushDeviceID `json:"deviceID"`
	Keys     struct {
		// P256Dh An Elliptic curve Diffie–Hellman public key on the P-256 curve (that is, the NIST secp256r1 elliptic curve). The resulting key is an uncompressed point in ANSI X9.62 format.
		P256Dh string `json:"p256dh"`
	} `json:"keys"`

	// ExpirationTime The time at which the subscription expires. This is the time when the subscription will be automatically deleted by the browser.
	ExpirationTime time.Time `json:"expirationTime,omitempty"`
}

// Session A session for a user.
type Session struct {
	// ID The session identifier
	ID int64 `json:"id"`

	// CreatedAt The time the session was created
	CreatedAt time.Time `json:"createdAt"`

	// LastUsed The last time the session was used
	LastUsed time.Time `json:"lastUsed"`

	// ExpiresAt The time the session expires, or null if it never expires
	ExpiresAt time.Time `json:"expiresAt,omitempty"`
}

// User A user of the system.
type User struct {
	// Name The user's name
	Name string `json:"name"`

	// Locale A locale identifier.
	Locale Locale `json:"locale"`

	// HasAvatar Whether the user has an avatar.
	HasAvatar bool `json:"hasAvatar"`
}

// UserSecret A secret and unique user identifier. This secret is generated once and never changes. It is used to both authenticate and identify a user, so it should be kept secret.
type UserSecret = user.Secret

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = Error

// RateLimitedResponse defines model for RateLimitedResponse.
type RateLimitedResponse = Error

// AuthJSONBody defines parameters for Auth.
type AuthJSONBody struct {
	// Secret A secret and unique user identifier. This secret is generated once and never changes. It is used to both authenticate and identify a user, so it should be kept secret.
	Secret UserSecret `json:"secret"`
}

// AuthParams defines parameters for Auth.
type AuthParams struct {
	// UserAgent The user agent of the client making the request.
	UserAgent *string `json:"User-Agent,omitempty"`
}

// DosageParams defines parameters for Dosage.
type DosageParams struct {
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`
	End   *time.Time `form:"end,omitempty" json:"end,omitempty"`
}

// ForgetDosesParams defines parameters for ForgetDoses.
type ForgetDosesParams struct {
	DoseTimes []time.Time `form:"doseTimes" json:"doseTimes"`
}

// EditDoseJSONBody defines parameters for EditDose.
type EditDoseJSONBody = Dose

// ExportDosesParams defines parameters for ExportDoses.
type ExportDosesParams struct {
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`
	End   *time.Time `form:"end,omitempty" json:"end,omitempty"`

	// Accept The format to export the dosage history in.
	Accept ExportDosesParamsAccept `json:"Accept"`
}

// ExportDosesParamsAccept defines parameters for ExportDoses.
type ExportDosesParamsAccept string

// ImportDosesParams defines parameters for ImportDoses.
type ImportDosesParams struct {
	// ContentType The format to import the dosage history as.
	ContentType ImportDosesParamsContentType `json:"Content-Type"`
}

// ImportDosesParamsContentType defines parameters for ImportDoses.
type ImportDosesParamsContentType string

// DeleteUserSessionParams defines parameters for DeleteUserSession.
type DeleteUserSessionParams struct {
	ID int64 `form:"id" json:"id"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	// Name The name to register with
	Name string `json:"name"`
}

// AuthJSONRequestBody defines body for Auth for application/json ContentType.
type AuthJSONRequestBody AuthJSONBody

// SetDosageJSONRequestBody defines body for SetDosage for application/json ContentType.
type SetDosageJSONRequestBody = Dosage

// EditDoseJSONRequestBody defines body for EditDose for application/json ContentType.
type EditDoseJSONRequestBody = EditDoseJSONBody

// ImportDosesJSONRequestBody defines body for ImportDoses for application/json ContentType.
type ImportDosesJSONRequestBody = DosageHistory

// UserSubscribePushJSONRequestBody defines body for UserSubscribePush for application/json ContentType.
type UserSubscribePushJSONRequestBody = PushSubscription

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user and obtain a session
	// (POST /auth)
	Auth(w http.ResponseWriter, r *http.Request, params AuthParams)
	// List all available delivery methods
	// (GET /delivery-methods)
	DeliveryMethods(w http.ResponseWriter, r *http.Request)
	// Clear the user's dosage schedule
	// (DELETE /dosage)
	ClearDosage(w http.ResponseWriter, r *http.Request)
	// Get the user's dosage and optionally their history
	// (GET /dosage)
	Dosage(w http.ResponseWriter, r *http.Request, params DosageParams)
	// Set the user's dosage
	// (PUT /dosage)
	SetDosage(w http.ResponseWriter, r *http.Request)
	// Delete multiple dosages from the user's history
	// (DELETE /dosage/dose)
	ForgetDoses(w http.ResponseWriter, r *http.Request, params ForgetDosesParams)
	// Record a new dosage to the user's history
	// (POST /dosage/dose)
	RecordDose(w http.ResponseWriter, r *http.Request)
	// Delete a dosage from the user's history
	// (DELETE /dosage/dose/{doseTime})
	ForgetDose(w http.ResponseWriter, r *http.Request, doseTime time.Time)
	// Update a dosage in the user's history
	// (PUT /dosage/dose/{doseTime})
	EditDose(w http.ResponseWriter, r *http.Request, doseTime time.Time)
	// Export the user's dosage history
	// (GET /dosage/export-doses)
	ExportDoses(w http.ResponseWriter, r *http.Request, params ExportDosesParams)
	// Import a CSV file of dosage history
	// (POST /dosage/import-doses)
	ImportDoses(w http.ResponseWriter, r *http.Request, params ImportDosesParams)
	// Get the current user
	// (GET /me)
	CurrentUser(w http.ResponseWriter, r *http.Request)
	// Get the current user's avatar
	// (GET /me/avatar)
	CurrentUserAvatar(w http.ResponseWriter, r *http.Request)
	// Set the current user's avatar
	// (PUT /me/avatar)
	SetCurrentUserAvatar(w http.ResponseWriter, r *http.Request)
	// Delete one of the current user's sessions
	// (DELETE /me/sessions)
	DeleteUserSession(w http.ResponseWriter, r *http.Request, params DeleteUserSessionParams)
	// List the current user's sessions
	// (GET /me/sessions)
	CurrentUserSessions(w http.ResponseWriter, r *http.Request)
	// Get the user's notification methods
	// (GET /notifications/methods)
	UserNotificationMethods(w http.ResponseWriter, r *http.Request)
	// Create or update a push subscription
	// (PUT /notifications/methods/push)
	UserSubscribePush(w http.ResponseWriter, r *http.Request)
	// Unsubscribe from push notifications
	// (DELETE /notifications/methods/push/{deviceID})
	UserUnsubscribePush(w http.ResponseWriter, r *http.Request, deviceID PushDeviceID)
	// Get the user's push notification subscription
	// (GET /notifications/methods/push/{deviceID})
	UserPushSubscription(w http.ResponseWriter, r *http.Request, deviceID PushDeviceID)
	// Get the server's push notification information
	// (GET /push-info)
	WebPushInfo(w http.ResponseWriter, r *http.Request)
	// Register a new account
	// (POST /register)
	Register(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Auth operation middleware
func (siw *ServerInterfaceWrapper) Auth(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthParams

	headers := r.Header

	// ------------- Optional header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "User-Agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", valueList[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "User-Agent", Err: err})
			return
		}

		params.UserAgent = &UserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Auth(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeliveryMethods operation middleware
func (siw *ServerInterfaceWrapper) DeliveryMethods(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeliveryMethods(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClearDosage operation middleware
func (siw *ServerInterfaceWrapper) ClearDosage(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClearDosage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Dosage operation middleware
func (siw *ServerInterfaceWrapper) Dosage(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DosageParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Dosage(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetDosage operation middleware
func (siw *ServerInterfaceWrapper) SetDosage(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetDosage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ForgetDoses operation middleware
func (siw *ServerInterfaceWrapper) ForgetDoses(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ForgetDosesParams

	// ------------- Required query parameter "doseTimes" -------------

	if paramValue := r.URL.Query().Get("doseTimes"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "doseTimes"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "doseTimes", r.URL.Query(), &params.DoseTimes)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "doseTimes", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ForgetDoses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RecordDose operation middleware
func (siw *ServerInterfaceWrapper) RecordDose(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RecordDose(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ForgetDose operation middleware
func (siw *ServerInterfaceWrapper) ForgetDose(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "doseTime" -------------
	var doseTime time.Time

	err = runtime.BindStyledParameterWithOptions("simple", "doseTime", r.PathValue("doseTime"), &doseTime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "doseTime", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ForgetDose(w, r, doseTime)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// EditDose operation middleware
func (siw *ServerInterfaceWrapper) EditDose(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "doseTime" -------------
	var doseTime time.Time

	err = runtime.BindStyledParameterWithOptions("simple", "doseTime", r.PathValue("doseTime"), &doseTime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "doseTime", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditDose(w, r, doseTime)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExportDoses operation middleware
func (siw *ServerInterfaceWrapper) ExportDoses(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportDosesParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept ExportDosesParamsAccept
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Accept", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Accept", Err: err})
			return
		}

		params.Accept = Accept

	} else {
		err := fmt.Errorf("Header parameter Accept is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Accept", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExportDoses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ImportDoses operation middleware
func (siw *ServerInterfaceWrapper) ImportDoses(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ImportDosesParams

	headers := r.Header

	// ------------- Required header parameter "Content-Type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Type")]; found {
		var ContentType ImportDosesParamsContentType
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Content-Type", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Type", valueList[0], &ContentType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Content-Type", Err: err})
			return
		}

		params.ContentType = ContentType

	} else {
		err := fmt.Errorf("Header parameter Content-Type is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Content-Type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImportDoses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CurrentUser operation middleware
func (siw *ServerInterfaceWrapper) CurrentUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CurrentUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) CurrentUserAvatar(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CurrentUserAvatar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetCurrentUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) SetCurrentUserAvatar(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetCurrentUserAvatar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserSession(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserSessionParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.ID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserSession(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CurrentUserSessions operation middleware
func (siw *ServerInterfaceWrapper) CurrentUserSessions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CurrentUserSessions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UserNotificationMethods operation middleware
func (siw *ServerInterfaceWrapper) UserNotificationMethods(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserNotificationMethods(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UserSubscribePush operation middleware
func (siw *ServerInterfaceWrapper) UserSubscribePush(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserSubscribePush(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UserUnsubscribePush operation middleware
func (siw *ServerInterfaceWrapper) UserUnsubscribePush(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "deviceID" -------------
	var deviceID PushDeviceID

	err = runtime.BindStyledParameterWithOptions("simple", "deviceID", r.PathValue("deviceID"), &deviceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deviceID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserUnsubscribePush(w, r, deviceID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UserPushSubscription operation middleware
func (siw *ServerInterfaceWrapper) UserPushSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "deviceID" -------------
	var deviceID PushDeviceID

	err = runtime.BindStyledParameterWithOptions("simple", "deviceID", r.PathValue("deviceID"), &deviceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deviceID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserPushSubscription(w, r, deviceID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// WebPushInfo operation middleware
func (siw *ServerInterfaceWrapper) WebPushInfo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WebPushInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth", wrapper.Auth)
	m.HandleFunc("GET "+options.BaseURL+"/delivery-methods", wrapper.DeliveryMethods)
	m.HandleFunc("DELETE "+options.BaseURL+"/dosage", wrapper.ClearDosage)
	m.HandleFunc("GET "+options.BaseURL+"/dosage", wrapper.Dosage)
	m.HandleFunc("PUT "+options.BaseURL+"/dosage", wrapper.SetDosage)
	m.HandleFunc("DELETE "+options.BaseURL+"/dosage/dose", wrapper.ForgetDoses)
	m.HandleFunc("POST "+options.BaseURL+"/dosage/dose", wrapper.RecordDose)
	m.HandleFunc("DELETE "+options.BaseURL+"/dosage/dose/{doseTime}", wrapper.ForgetDose)
	m.HandleFunc("PUT "+options.BaseURL+"/dosage/dose/{doseTime}", wrapper.EditDose)
	m.HandleFunc("GET "+options.BaseURL+"/dosage/export-doses", wrapper.ExportDoses)
	m.HandleFunc("POST "+options.BaseURL+"/dosage/import-doses", wrapper.ImportDoses)
	m.HandleFunc("GET "+options.BaseURL+"/me", wrapper.CurrentUser)
	m.HandleFunc("GET "+options.BaseURL+"/me/avatar", wrapper.CurrentUserAvatar)
	m.HandleFunc("PUT "+options.BaseURL+"/me/avatar", wrapper.SetCurrentUserAvatar)
	m.HandleFunc("DELETE "+options.BaseURL+"/me/sessions", wrapper.DeleteUserSession)
	m.HandleFunc("GET "+options.BaseURL+"/me/sessions", wrapper.CurrentUserSessions)
	m.HandleFunc("GET "+options.BaseURL+"/notifications/methods", wrapper.UserNotificationMethods)
	m.HandleFunc("PUT "+options.BaseURL+"/notifications/methods/push", wrapper.UserSubscribePush)
	m.HandleFunc("DELETE "+options.BaseURL+"/notifications/methods/push/{deviceID}", wrapper.UserUnsubscribePush)
	m.HandleFunc("GET "+options.BaseURL+"/notifications/methods/push/{deviceID}", wrapper.UserPushSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/push-info", wrapper.WebPushInfo)
	m.HandleFunc("POST "+options.BaseURL+"/register", wrapper.Register)

	return m
}

type ErrorResponseJSONResponse Error

type RateLimitedResponseResponseHeaders struct {
	RetryAfter int32
}
type RateLimitedResponseJSONResponse struct {
	Body Error

	Headers RateLimitedResponseResponseHeaders
}

type AuthRequestObject struct {
	Params AuthParams
	Body   *AuthJSONRequestBody
}

type AuthResponseObject interface {
	VisitAuthResponse(w http.ResponseWriter) error
}

type Auth200JSONResponse struct {
	// Token The session token
	Token string `json:"token"`
}

func (response Auth200JSONResponse) VisitAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response AuthdefaultJSONResponse) VisitAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeliveryMethodsRequestObject struct {
}

type DeliveryMethodsResponseObject interface {
	VisitDeliveryMethodsResponse(w http.ResponseWriter) error
}

type DeliveryMethods200JSONResponse []DeliveryMethod

func (response DeliveryMethods200JSONResponse) VisitDeliveryMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeliveryMethodsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeliveryMethodsdefaultJSONResponse) VisitDeliveryMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ClearDosageRequestObject struct {
}

type ClearDosageResponseObject interface {
	VisitClearDosageResponse(w http.ResponseWriter) error
}

type ClearDosage204Response struct {
}

func (response ClearDosage204Response) VisitClearDosageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ClearDosagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ClearDosagedefaultJSONResponse) VisitClearDosageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DosageRequestObject struct {
	Params DosageParams
}

type DosageResponseObject interface {
	VisitDosageResponse(w http.ResponseWriter) error
}

type Dosage200JSONResponse struct {
	// Dosage The user's current dosage schedule. This is null if the user has no dosage set.
	Dosage *Dosage `json:"dosage,omitempty"`

	// History The user's dosage history within the requested time range. If either historyStart or historyEnd are not provided, this will be null.
	History *DosageHistory `json:"history,omitempty"`
}

func (response Dosage200JSONResponse) VisitDosageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetDosageRequestObject struct {
	Body *SetDosageJSONRequestBody
}

type SetDosageResponseObject interface {
	VisitSetDosageResponse(w http.ResponseWriter) error
}

type SetDosage204Response struct {
}

func (response SetDosage204Response) VisitSetDosageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SetDosagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetDosagedefaultJSONResponse) VisitSetDosageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ForgetDosesRequestObject struct {
	Params ForgetDosesParams
}

type ForgetDosesResponseObject interface {
	VisitForgetDosesResponse(w http.ResponseWriter) error
}

type ForgetDoses204Response struct {
}

func (response ForgetDoses204Response) VisitForgetDosesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ForgetDosesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ForgetDosesdefaultJSONResponse) VisitForgetDosesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RecordDoseRequestObject struct {
}

type RecordDoseResponseObject interface {
	VisitRecordDoseResponse(w http.ResponseWriter) error
}

type RecordDose200JSONResponse Dose

func (response RecordDose200JSONResponse) VisitRecordDoseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ForgetDoseRequestObject struct {
	DoseTime time.Time `json:"doseTime"`
}

type ForgetDoseResponseObject interface {
	VisitForgetDoseResponse(w http.ResponseWriter) error
}

type ForgetDose204Response struct {
}

func (response ForgetDose204Response) VisitForgetDoseResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ForgetDosedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ForgetDosedefaultJSONResponse) VisitForgetDoseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EditDoseRequestObject struct {
	DoseTime time.Time `json:"doseTime"`
	Body     *EditDoseJSONRequestBody
}

type EditDoseResponseObject interface {
	VisitEditDoseResponse(w http.ResponseWriter) error
}

type EditDose204Response struct {
}

func (response EditDose204Response) VisitEditDoseResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type EditDosedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response EditDosedefaultJSONResponse) VisitEditDoseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExportDosesRequestObject struct {
	Params ExportDosesParams
}

type ExportDosesResponseObject interface {
	VisitExportDosesResponse(w http.ResponseWriter) error
}

type ExportDoses200ResponseHeaders struct {
	ContentDisposition string
}

type ExportDoses200JSONResponse struct {
	Body    DosageHistory
	Headers ExportDoses200ResponseHeaders
}

func (response ExportDoses200JSONResponse) VisitExportDosesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExportDoses200TextCsvResponse struct {
	Body          io.Reader
	Headers       ExportDoses200ResponseHeaders
	ContentLength int64
}

func (response ExportDoses200TextCsvResponse) VisitExportDosesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/csv")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ExportDoses429JSONResponse struct {
	RateLimitedResponseJSONResponse
}

func (response ExportDoses429JSONResponse) VisitExportDosesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExportDosesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExportDosesdefaultJSONResponse) VisitExportDosesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ImportDosesRequestObject struct {
	Params   ImportDosesParams
	JSONBody *ImportDosesJSONRequestBody
	Body     io.Reader
}

type ImportDosesResponseObject interface {
	VisitImportDosesResponse(w http.ResponseWriter) error
}

type ImportDoses200JSONResponse struct {
	Error *Error `json:"error,omitempty"`

	// Records The number of records in the file.
	Records int `json:"records"`

	// Succeeded The number of records actually imported successfully. This is not equal to #records if there were errors or duplicate entries.
	Succeeded int `json:"succeeded"`
}

func (response ImportDoses200JSONResponse) VisitImportDosesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CurrentUserRequestObject struct {
}

type CurrentUserResponseObject interface {
	VisitCurrentUserResponse(w http.ResponseWriter) error
}

type CurrentUser200JSONResponse struct {
	// Name The user's name
	Name string `json:"name"`

	// Locale A locale identifier.
	Locale Locale `json:"locale"`

	// HasAvatar Whether the user has an avatar.
	HasAvatar bool `json:"hasAvatar"`

	// Secret A secret and unique user identifier. This secret is generated once and never changes. It is used to both authenticate and identify a user, so it should be kept secret.
	Secret UserSecret `json:"secret"`
}

func (response CurrentUser200JSONResponse) VisitCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CurrentUserdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CurrentUserdefaultJSONResponse) VisitCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CurrentUserAvatarRequestObject struct {
}

type CurrentUserAvatarResponseObject interface {
	VisitCurrentUserAvatarResponse(w http.ResponseWriter) error
}

type CurrentUserAvatar200ImageResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response CurrentUserAvatar200ImageResponse) VisitCurrentUserAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CurrentUserAvatardefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CurrentUserAvatardefaultJSONResponse) VisitCurrentUserAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SetCurrentUserAvatarRequestObject struct {
	ContentType string
	Body        io.Reader
}

type SetCurrentUserAvatarResponseObject interface {
	VisitSetCurrentUserAvatarResponse(w http.ResponseWriter) error
}

type SetCurrentUserAvatar204Response struct {
}

func (response SetCurrentUserAvatar204Response) VisitSetCurrentUserAvatarResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SetCurrentUserAvatardefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetCurrentUserAvatardefaultJSONResponse) VisitSetCurrentUserAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserSessionRequestObject struct {
	Params DeleteUserSessionParams
}

type DeleteUserSessionResponseObject interface {
	VisitDeleteUserSessionResponse(w http.ResponseWriter) error
}

type DeleteUserSession204Response struct {
}

func (response DeleteUserSession204Response) VisitDeleteUserSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUserSessiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteUserSessiondefaultJSONResponse) VisitDeleteUserSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CurrentUserSessionsRequestObject struct {
}

type CurrentUserSessionsResponseObject interface {
	VisitCurrentUserSessionsResponse(w http.ResponseWriter) error
}

type CurrentUserSessions200JSONResponse []Session

func (response CurrentUserSessions200JSONResponse) VisitCurrentUserSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CurrentUserSessionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CurrentUserSessionsdefaultJSONResponse) VisitCurrentUserSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserNotificationMethodsRequestObject struct {
}

type UserNotificationMethodsResponseObject interface {
	VisitUserNotificationMethodsResponse(w http.ResponseWriter) error
}

type UserNotificationMethods200JSONResponse ReturnedNotificationMethods

func (response UserNotificationMethods200JSONResponse) VisitUserNotificationMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserNotificationMethodsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserNotificationMethodsdefaultJSONResponse) VisitUserNotificationMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserSubscribePushRequestObject struct {
	Body *UserSubscribePushJSONRequestBody
}

type UserSubscribePushResponseObject interface {
	VisitUserSubscribePushResponse(w http.ResponseWriter) error
}

type UserSubscribePush204Response struct {
}

func (response UserSubscribePush204Response) VisitUserSubscribePushResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UserSubscribePushdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserSubscribePushdefaultJSONResponse) VisitUserSubscribePushResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserUnsubscribePushRequestObject struct {
	DeviceID PushDeviceID `json:"deviceID"`
}

type UserUnsubscribePushResponseObject interface {
	VisitUserUnsubscribePushResponse(w http.ResponseWriter) error
}

type UserUnsubscribePush204Response struct {
}

func (response UserUnsubscribePush204Response) VisitUserUnsubscribePushResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UserUnsubscribePushdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserUnsubscribePushdefaultJSONResponse) VisitUserUnsubscribePushResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserPushSubscriptionRequestObject struct {
	DeviceID PushDeviceID `json:"deviceID"`
}

type UserPushSubscriptionResponseObject interface {
	VisitUserPushSubscriptionResponse(w http.ResponseWriter) error
}

type UserPushSubscription200JSONResponse PushSubscription

func (response UserPushSubscription200JSONResponse) VisitUserPushSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserPushSubscription404JSONResponse Error

func (response UserPushSubscription404JSONResponse) VisitUserPushSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UserPushSubscriptiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserPushSubscriptiondefaultJSONResponse) VisitUserPushSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WebPushInfoRequestObject struct {
}

type WebPushInfoResponseObject interface {
	VisitWebPushInfoResponse(w http.ResponseWriter) error
}

type WebPushInfo200JSONResponse PushInfo

func (response WebPushInfo200JSONResponse) VisitWebPushInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WebPushInfodefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response WebPushInfodefaultJSONResponse) VisitWebPushInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register200JSONResponse struct {
	// Name The user's name
	Name string `json:"name"`

	// Locale A locale identifier.
	Locale Locale `json:"locale"`

	// HasAvatar Whether the user has an avatar.
	HasAvatar bool `json:"hasAvatar"`

	// Secret A secret and unique user identifier. This secret is generated once and never changes. It is used to both authenticate and identify a user, so it should be kept secret.
	Secret UserSecret `json:"secret"`
}

func (response Register200JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RegisterdefaultJSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate a user and obtain a session
	// (POST /auth)
	Auth(ctx context.Context, request AuthRequestObject) (AuthResponseObject, error)
	// List all available delivery methods
	// (GET /delivery-methods)
	DeliveryMethods(ctx context.Context, request DeliveryMethodsRequestObject) (DeliveryMethodsResponseObject, error)
	// Clear the user's dosage schedule
	// (DELETE /dosage)
	ClearDosage(ctx context.Context, request ClearDosageRequestObject) (ClearDosageResponseObject, error)
	// Get the user's dosage and optionally their history
	// (GET /dosage)
	Dosage(ctx context.Context, request DosageRequestObject) (DosageResponseObject, error)
	// Set the user's dosage
	// (PUT /dosage)
	SetDosage(ctx context.Context, request SetDosageRequestObject) (SetDosageResponseObject, error)
	// Delete multiple dosages from the user's history
	// (DELETE /dosage/dose)
	ForgetDoses(ctx context.Context, request ForgetDosesRequestObject) (ForgetDosesResponseObject, error)
	// Record a new dosage to the user's history
	// (POST /dosage/dose)
	RecordDose(ctx context.Context, request RecordDoseRequestObject) (RecordDoseResponseObject, error)
	// Delete a dosage from the user's history
	// (DELETE /dosage/dose/{doseTime})
	ForgetDose(ctx context.Context, request ForgetDoseRequestObject) (ForgetDoseResponseObject, error)
	// Update a dosage in the user's history
	// (PUT /dosage/dose/{doseTime})
	EditDose(ctx context.Context, request EditDoseRequestObject) (EditDoseResponseObject, error)
	// Export the user's dosage history
	// (GET /dosage/export-doses)
	ExportDoses(ctx context.Context, request ExportDosesRequestObject) (ExportDosesResponseObject, error)
	// Import a CSV file of dosage history
	// (POST /dosage/import-doses)
	ImportDoses(ctx context.Context, request ImportDosesRequestObject) (ImportDosesResponseObject, error)
	// Get the current user
	// (GET /me)
	CurrentUser(ctx context.Context, request CurrentUserRequestObject) (CurrentUserResponseObject, error)
	// Get the current user's avatar
	// (GET /me/avatar)
	CurrentUserAvatar(ctx context.Context, request CurrentUserAvatarRequestObject) (CurrentUserAvatarResponseObject, error)
	// Set the current user's avatar
	// (PUT /me/avatar)
	SetCurrentUserAvatar(ctx context.Context, request SetCurrentUserAvatarRequestObject) (SetCurrentUserAvatarResponseObject, error)
	// Delete one of the current user's sessions
	// (DELETE /me/sessions)
	DeleteUserSession(ctx context.Context, request DeleteUserSessionRequestObject) (DeleteUserSessionResponseObject, error)
	// List the current user's sessions
	// (GET /me/sessions)
	CurrentUserSessions(ctx context.Context, request CurrentUserSessionsRequestObject) (CurrentUserSessionsResponseObject, error)
	// Get the user's notification methods
	// (GET /notifications/methods)
	UserNotificationMethods(ctx context.Context, request UserNotificationMethodsRequestObject) (UserNotificationMethodsResponseObject, error)
	// Create or update a push subscription
	// (PUT /notifications/methods/push)
	UserSubscribePush(ctx context.Context, request UserSubscribePushRequestObject) (UserSubscribePushResponseObject, error)
	// Unsubscribe from push notifications
	// (DELETE /notifications/methods/push/{deviceID})
	UserUnsubscribePush(ctx context.Context, request UserUnsubscribePushRequestObject) (UserUnsubscribePushResponseObject, error)
	// Get the user's push notification subscription
	// (GET /notifications/methods/push/{deviceID})
	UserPushSubscription(ctx context.Context, request UserPushSubscriptionRequestObject) (UserPushSubscriptionResponseObject, error)
	// Get the server's push notification information
	// (GET /push-info)
	WebPushInfo(ctx context.Context, request WebPushInfoRequestObject) (WebPushInfoResponseObject, error)
	// Register a new account
	// (POST /register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Auth operation middleware
func (sh *strictHandler) Auth(w http.ResponseWriter, r *http.Request, params AuthParams) {
	var request AuthRequestObject

	request.Params = params

	var body AuthJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Auth(ctx, request.(AuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Auth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthResponseObject); ok {
		if err := validResponse.VisitAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeliveryMethods operation middleware
func (sh *strictHandler) DeliveryMethods(w http.ResponseWriter, r *http.Request) {
	var request DeliveryMethodsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeliveryMethods(ctx, request.(DeliveryMethodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeliveryMethods")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeliveryMethodsResponseObject); ok {
		if err := validResponse.VisitDeliveryMethodsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClearDosage operation middleware
func (sh *strictHandler) ClearDosage(w http.ResponseWriter, r *http.Request) {
	var request ClearDosageRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClearDosage(ctx, request.(ClearDosageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClearDosage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClearDosageResponseObject); ok {
		if err := validResponse.VisitClearDosageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Dosage operation middleware
func (sh *strictHandler) Dosage(w http.ResponseWriter, r *http.Request, params DosageParams) {
	var request DosageRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Dosage(ctx, request.(DosageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Dosage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DosageResponseObject); ok {
		if err := validResponse.VisitDosageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetDosage operation middleware
func (sh *strictHandler) SetDosage(w http.ResponseWriter, r *http.Request) {
	var request SetDosageRequestObject

	var body SetDosageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetDosage(ctx, request.(SetDosageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetDosage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetDosageResponseObject); ok {
		if err := validResponse.VisitSetDosageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ForgetDoses operation middleware
func (sh *strictHandler) ForgetDoses(w http.ResponseWriter, r *http.Request, params ForgetDosesParams) {
	var request ForgetDosesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ForgetDoses(ctx, request.(ForgetDosesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ForgetDoses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ForgetDosesResponseObject); ok {
		if err := validResponse.VisitForgetDosesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RecordDose operation middleware
func (sh *strictHandler) RecordDose(w http.ResponseWriter, r *http.Request) {
	var request RecordDoseRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RecordDose(ctx, request.(RecordDoseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RecordDose")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RecordDoseResponseObject); ok {
		if err := validResponse.VisitRecordDoseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ForgetDose operation middleware
func (sh *strictHandler) ForgetDose(w http.ResponseWriter, r *http.Request, doseTime time.Time) {
	var request ForgetDoseRequestObject

	request.DoseTime = doseTime

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ForgetDose(ctx, request.(ForgetDoseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ForgetDose")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ForgetDoseResponseObject); ok {
		if err := validResponse.VisitForgetDoseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// EditDose operation middleware
func (sh *strictHandler) EditDose(w http.ResponseWriter, r *http.Request, doseTime time.Time) {
	var request EditDoseRequestObject

	request.DoseTime = doseTime

	var body EditDoseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EditDose(ctx, request.(EditDoseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EditDose")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EditDoseResponseObject); ok {
		if err := validResponse.VisitEditDoseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExportDoses operation middleware
func (sh *strictHandler) ExportDoses(w http.ResponseWriter, r *http.Request, params ExportDosesParams) {
	var request ExportDosesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExportDoses(ctx, request.(ExportDosesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExportDoses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExportDosesResponseObject); ok {
		if err := validResponse.VisitExportDosesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ImportDoses operation middleware
func (sh *strictHandler) ImportDoses(w http.ResponseWriter, r *http.Request, params ImportDosesParams) {
	var request ImportDosesRequestObject

	request.Params = params
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body ImportDosesJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "text/csv") {
		request.Body = r.Body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ImportDoses(ctx, request.(ImportDosesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportDoses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ImportDosesResponseObject); ok {
		if err := validResponse.VisitImportDosesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CurrentUser operation middleware
func (sh *strictHandler) CurrentUser(w http.ResponseWriter, r *http.Request) {
	var request CurrentUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CurrentUser(ctx, request.(CurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CurrentUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CurrentUserResponseObject); ok {
		if err := validResponse.VisitCurrentUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CurrentUserAvatar operation middleware
func (sh *strictHandler) CurrentUserAvatar(w http.ResponseWriter, r *http.Request) {
	var request CurrentUserAvatarRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CurrentUserAvatar(ctx, request.(CurrentUserAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CurrentUserAvatar")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CurrentUserAvatarResponseObject); ok {
		if err := validResponse.VisitCurrentUserAvatarResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetCurrentUserAvatar operation middleware
func (sh *strictHandler) SetCurrentUserAvatar(w http.ResponseWriter, r *http.Request) {
	var request SetCurrentUserAvatarRequestObject

	request.ContentType = r.Header.Get("Content-Type")

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetCurrentUserAvatar(ctx, request.(SetCurrentUserAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetCurrentUserAvatar")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetCurrentUserAvatarResponseObject); ok {
		if err := validResponse.VisitSetCurrentUserAvatarResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserSession operation middleware
func (sh *strictHandler) DeleteUserSession(w http.ResponseWriter, r *http.Request, params DeleteUserSessionParams) {
	var request DeleteUserSessionRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserSession(ctx, request.(DeleteUserSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserSession")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserSessionResponseObject); ok {
		if err := validResponse.VisitDeleteUserSessionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CurrentUserSessions operation middleware
func (sh *strictHandler) CurrentUserSessions(w http.ResponseWriter, r *http.Request) {
	var request CurrentUserSessionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CurrentUserSessions(ctx, request.(CurrentUserSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CurrentUserSessions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CurrentUserSessionsResponseObject); ok {
		if err := validResponse.VisitCurrentUserSessionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserNotificationMethods operation middleware
func (sh *strictHandler) UserNotificationMethods(w http.ResponseWriter, r *http.Request) {
	var request UserNotificationMethodsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserNotificationMethods(ctx, request.(UserNotificationMethodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserNotificationMethods")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserNotificationMethodsResponseObject); ok {
		if err := validResponse.VisitUserNotificationMethodsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserSubscribePush operation middleware
func (sh *strictHandler) UserSubscribePush(w http.ResponseWriter, r *http.Request) {
	var request UserSubscribePushRequestObject

	var body UserSubscribePushJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserSubscribePush(ctx, request.(UserSubscribePushRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserSubscribePush")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserSubscribePushResponseObject); ok {
		if err := validResponse.VisitUserSubscribePushResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserUnsubscribePush operation middleware
func (sh *strictHandler) UserUnsubscribePush(w http.ResponseWriter, r *http.Request, deviceID PushDeviceID) {
	var request UserUnsubscribePushRequestObject

	request.DeviceID = deviceID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserUnsubscribePush(ctx, request.(UserUnsubscribePushRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserUnsubscribePush")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserUnsubscribePushResponseObject); ok {
		if err := validResponse.VisitUserUnsubscribePushResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserPushSubscription operation middleware
func (sh *strictHandler) UserPushSubscription(w http.ResponseWriter, r *http.Request, deviceID PushDeviceID) {
	var request UserPushSubscriptionRequestObject

	request.DeviceID = deviceID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserPushSubscription(ctx, request.(UserPushSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserPushSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserPushSubscriptionResponseObject); ok {
		if err := validResponse.VisitUserPushSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// WebPushInfo operation middleware
func (sh *strictHandler) WebPushInfo(w http.ResponseWriter, r *http.Request) {
	var request WebPushInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WebPushInfo(ctx, request.(WebPushInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WebPushInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WebPushInfoResponseObject); ok {
		if err := validResponse.VisitWebPushInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Register operation middleware
func (sh *strictHandler) Register(w http.ResponseWriter, r *http.Request) {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx, request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		if err := validResponse.VisitRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
