# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/ba055ca00cbd735dceef4ed7c9db024cd9bfcd1a/schemas/v3.0/schema.json
openapi: 3.0.0

info:
  title: user
  version: ""

paths:
  /login:
    post:
      summary: Log into an existing account
      operationId: login
      security: []
      parameters:
        - in: header
          name: User-Agent
          schema:
            type: string
          required: false
          description: >-
            The user agent string of the client making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  description: The username to log in with
                password:
                  type: string
                  description: The password to log in with
      responses:
        "200":
          description: >-
            Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                required: [userID, token]
                properties:
                  userID:
                    $ref: "#/components/schemas/UserID"
                  token:
                    $ref: "#/components/schemas/SessionToken"
        default:
          $ref: "#/components/responses/ErrorResponse"

  /register:
    post:
      summary: Register a new account
      operationId: register
      security: []
      parameters:
        - in: header
          name: User-Agent
          schema:
            type: string
          required: false
          description: >-
            The user agent string of the client making the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  description: The name to register with
                email:
                  type: string
                  description: The username to register with
                password:
                  type: string
                  description: The password to register with
      responses:
        "200":
          description: >-
            Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                required: [user, token]
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    $ref: "#/components/schemas/SessionToken"
        default:
          $ref: "#/components/responses/ErrorResponse"

  /user/{userID}:
    get:
      summary: Get a user by ID
      operationId: user
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        "200":
          description: >-
            Successfully retrieved the current user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/ErrorResponse"

  /user/{userID}/avatar:
    get:
      summary: Get a user's avatar by ID
      operationId: userAvatar
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        "200":
          description: >-
            Successfully retrieved the user's avatar.
          content:
            image/*:
              schema:
                type: string
                format: binary
        default:
          $ref: "#/components/responses/ErrorResponse"

components:
  parameters:
    userID:
      in: path
      name: userID
      schema:
        type: string
        x-go-type: user.UserID
        x-go-type-import:
          path: libdb.so/e2clicker/services/user
          name: userservice
      required: true
      description: >-
        The ID of the user to get the avatar for.
      # Without this extension, the parameter will collide with the actual
      # UserID type. Underneath, they're the same type.
      x-go-name: UserIDParam

  schemas:
    UserID:
      description: >-
        A unique user identifier.
      type: string
      x-go-type: user.UserID
      x-go-type-import:
        path: libdb.so/e2clicker/services/user
        name: userservice

    Locale:
      description: >-
        A locale identifier.
      type: string
      x-go-type: user.Locale
      x-go-type-import:
        path: libdb.so/e2clicker/services/user
        name: userservice

    User:
      description: >-
        A user of the system.
      type: object
      required: [id, email, name, locale]
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        email:
          type: string
          description: The user's email address
        name:
          type: string
          description: The user's name
        locale:
          $ref: "#/components/schemas/Locale"

    SessionToken:
      description: >-
        A session token string.
        This is used in the Authorization header to authenticate requests.
      type: string
      x-go-type: user.SessionToken
      x-go-type-import:
        path: libdb.so/e2clicker/services/user
        name: userservice
