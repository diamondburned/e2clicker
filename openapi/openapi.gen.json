{
  "openapi": "3.0.0",
  "info": {
    "title": "e2clicker service",
    "version": "0"
  },
  "servers": [
    {
      "url": "https://e2clicker.app/api"
    },
    {
      "url": "/api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/deliverymethods": {
      "get": {
        "summary": "List all available delivery methods",
        "operationId": "deliveryMethods",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved delivery methods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeliveryMethod"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "dosage"
        ]
      }
    },
    "/dosage": {
      "get": {
        "summary": "Get the user's dosage and optionally their history",
        "operationId": "dosage",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The start date of the history to retrieve, if requested."
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The end date of the history to retrieve, if requested."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the dosage, if set.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dosage": {
                      "description": "The user's current dosage schedule. This is null if the user has no dosage set.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Dosage"
                        }
                      ]
                    },
                    "history": {
                      "description": "The user's dosage history within the requested time range. If either historyStart or historyEnd are not provided, this will be null.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/DosageHistory"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dosage"
        ]
      },
      "put": {
        "summary": "Set the user's dosage",
        "operationId": "setDosage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dosage"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully set the dosage."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "dosage"
        ]
      },
      "delete": {
        "summary": "Clear the user's dosage schedule",
        "operationId": "clearDosage",
        "responses": {
          "204": {
            "description": "Successfully cleared the dosage."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "dosage"
        ]
      }
    },
    "/dosage/dose": {
      "post": {
        "summary": "Record a new dosage to the user's history",
        "operationId": "recordDose",
        "description": "This endpoint is used to record a new dosage observation to the user's history. The current time is automatically used.",
        "responses": {
          "200": {
            "description": "Successfully recorded dosage.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DosageObservation"
                }
              }
            }
          }
        },
        "tags": [
          "dosage"
        ]
      },
      "put": {
        "summary": "Update a dosage in the user's history",
        "operationId": "editDose",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "The updated dosage observation. The ID must match an existing observation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DosageObservation"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated dosage."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "dosage"
        ]
      },
      "delete": {
        "summary": "Delete multiple dosages from the user's history",
        "operationId": "forgetDoses",
        "parameters": [
          {
            "name": "dose_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64",
                "description": "The dose IDs of the observations to delete."
              }
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted dosages."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "dosage"
        ]
      }
    },
    "/dosage/export": {
      "get": {
        "summary": "Export the user's dosage history",
        "operationId": "exportDosageHistory",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "text/csv",
                "application/json"
              ],
              "default": "text/csv"
            },
            "required": true,
            "description": "The format to export the dosage history in."
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The start date of the history to retrieve. If not provided, defaults to the beginning of time."
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The end date of the history to retrieve. If not provided, defaults to the current time."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the dosage history.",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/DosageHistoryCSV"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DosageHistory"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitedResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "dosage"
        ]
      }
    },
    "/dosage/import": {
      "post": {
        "summary": "Import a CSV file of dosage history",
        "operationId": "importDosageHistory",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "text/csv",
                "application/json"
              ],
              "default": "text/csv"
            },
            "required": true,
            "description": "The format to import the dosage history as."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/csv": {
              "schema": {
                "$ref": "#/components/schemas/DosageHistoryCSV"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DosageHistory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully imported the dosage history.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "records",
                    "succeeded"
                  ],
                  "properties": {
                    "records": {
                      "type": "integer",
                      "description": "The number of records in the file."
                    },
                    "succeeded": {
                      "type": "integer",
                      "description": "The number of records actually imported successfully. This is not equal to #records if there were errors or duplicate entries."
                    },
                    "error": {
                      "$ref": "#/components/schemas/Error"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dosage"
        ]
      }
    },
    "/pushinfo": {
      "get": {
        "summary": "Get the server's push notification information",
        "operationId": "webPushInfo",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the server's push notification information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushInfo"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "notification"
        ]
      }
    },
    "/notifications/methods": {
      "get": {
        "summary": "Get the user's notification methods",
        "operationId": "userNotificationMethods",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's push notification subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnedNotificationMethods"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "notification"
        ]
      }
    },
    "/notifications/methods/push/{deviceID}": {
      "get": {
        "summary": "Get the user's push notification subscription",
        "operationId": "userPushSubscription",
        "parameters": [
          {
            "name": "deviceID",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/PushDeviceID"
            },
            "required": true,
            "description": "The device ID of the push subscription to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's push notification subscription. The returned object will contain secrets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushSubscription"
                }
              }
            }
          },
          "404": {
            "description": "The user does not have a push notification subscription for the specified device ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "notification"
        ]
      },
      "delete": {
        "summary": "Unsubscribe from push notifications",
        "operationId": "userUnsubscribePush",
        "parameters": [
          {
            "name": "deviceID",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/PushDeviceID"
            },
            "required": true,
            "description": "The device ID of the push subscription to unsubscribe from."
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully unsubscribed from push notifications."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "notification"
        ]
      }
    },
    "/notifications/methods/push": {
      "put": {
        "summary": "Create or update a push subscription",
        "operationId": "userSubscribePush",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushSubscription"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully subscribed to push notifications."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "notification"
        ]
      }
    },
    "/_ignore/notification/_haha_anything_can_go_here_lol": {
      "get": {
        "tags": [
          "ignore",
          "notification"
        ],
        "responses": {
          "500": {
            "description": "This endpoint is not used and should not be called.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "These fields aren't used for any API routes. They're just here to make oazapfts happy :) See https://github.com/oazapfts/oazapfts/issues/325.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Notification"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Register a new account",
        "operationId": "register",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name to register with"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object",
                      "required": [
                        "secret"
                      ],
                      "properties": {
                        "secret": {
                          "$ref": "#/components/schemas/UserSecret"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/auth": {
      "post": {
        "summary": "Authenticate a user and obtain a session",
        "operationId": "auth",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "secret"
                ],
                "properties": {
                  "secret": {
                    "$ref": "#/components/schemas/UserSecret"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "User-Agent",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The user agent of the client making the request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "token"
                  ],
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The session token"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/me": {
      "get": {
        "summary": "Get the current user",
        "operationId": "currentUser",
        "responses": {
          "200": {
            "description": "Successfully retrieved the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object",
                      "required": [
                        "secret"
                      ],
                      "properties": {
                        "secret": {
                          "$ref": "#/components/schemas/UserSecret"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/me/avatar": {
      "get": {
        "summary": "Get the current user's avatar",
        "operationId": "currentUserAvatar",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's avatar.",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "user"
        ]
      },
      "put": {
        "summary": "Set the current user's avatar",
        "operationId": "setCurrentUserAvatar",
        "requestBody": {
          "required": true,
          "content": {
            "image/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully set the user's avatar."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/me/sessions": {
      "get": {
        "summary": "List the current user's sessions",
        "operationId": "currentUserSessions",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "user"
        ]
      },
      "delete": {
        "summary": "Delete one of the current user's sessions",
        "operationId": "deleteUserSession",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "description": "The session identifier to delete"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the user's sessions."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "tags": [
          "user"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "A message describing the error"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "description": "An array of errors that caused this error. If this is populated, then [details] is omitted.",
            "x-go-type-skip-optional-pointer": true
          },
          "details": {
            "description": "Additional details about the error. Ignored if [errors] is used."
          },
          "internal": {
            "type": "boolean",
            "description": "Whether the error is internal"
          },
          "internalCode": {
            "type": "string",
            "description": "An internal code for the error (useless for clients)"
          }
        }
      },
      "DeliveryMethod": {
        "type": "object",
        "required": [
          "id",
          "units",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A short string representing the delivery method. This is what goes into the DeliveryMethod fields.",
            "x-order": 1
          },
          "units": {
            "type": "string",
            "description": "The units of the delivery method.",
            "x-order": 2
          },
          "name": {
            "type": "string",
            "description": "The full name of the delivery method.",
            "x-order": 3
          },
          "description": {
            "type": "string",
            "description": "A description of the delivery method.",
            "x-order": 4,
            "x-go-type-skip-optional-pointer": true
          }
        }
      },
      "Dosage": {
        "type": "object",
        "required": [
          "deliveryMethod",
          "dose",
          "interval"
        ],
        "properties": {
          "deliveryMethod": {
            "type": "string",
            "description": "The delivery method to use.",
            "x-order": 1
          },
          "dose": {
            "type": "number",
            "format": "float",
            "description": "The dosage amount.",
            "x-order": 2
          },
          "interval": {
            "type": "number",
            "format": "double",
            "description": "The interval between doses in days.",
            "x-order": 3
          },
          "concurrence": {
            "type": "integer",
            "description": "The number of estrogen patches on the body at once. Only relevant if delivery method is patch.",
            "x-order": 4
          }
        }
      },
      "DosageHistory": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DosageObservation"
        }
      },
      "DosageHistoryCSV": {
        "type": "string",
        "example": "dose,method,takenAt,takenOffAt,comment\n100,patch tw,2020-01-01T00:00:00Z,,\n100,patch tw,2020-01-02T12:00:00Z,,\n100,patch tw,2020-01-04T00:00:00Z,,\n100,patch tw,2020-01-05T12:00:00Z,,",
        "description": "The CSV format of the user's dosage history."
      },
      "DosageObservation": {
        "type": "object",
        "required": [
          "id",
          "deliveryMethod",
          "dose",
          "takenAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the observation.",
            "x-order": 1
          },
          "deliveryMethod": {
            "type": "string",
            "description": "The delivery method used.",
            "x-order": 2
          },
          "dose": {
            "type": "number",
            "format": "float",
            "description": "The dosage amount.",
            "x-order": 3
          },
          "takenAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the dosage was taken.",
            "x-order": 4
          },
          "takenOffAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the dosage was taken off. This is only relevant for patch delivery methods.",
            "x-order": 5
          },
          "comment": {
            "type": "string",
            "description": "A comment about the dosage, if any.",
            "x-order": 6
          }
        }
      },
      "Notification": {
        "required": [
          "type",
          "message",
          "username"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "message": {
            "description": "The message of the notification.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationMessage"
              }
            ],
            "x-order": 2
          },
          "username": {
            "type": "string",
            "description": "The username of the user to send the notification to.",
            "x-order": 3
          }
        }
      },
      "NotificationType": {
        "type": "string",
        "enum": [
          "welcome_message",
          "reminder_message",
          "account_notice_message",
          "web_push_expiring_message"
        ],
        "description": "The type of notification:\n\n  - `welcome_message` is sent to welcome the user. Realistically, it is\n    used as a test message.\n  - `reminder_message` is sent to remind the user of their hormone dose.\n  - `account_notice_message` is sent to notify the user that they need\n    to check their account.\n  - `web_push_expiring_message` is sent to notify the user that their\n    web push subscription is expiring.",
        "x-order": -50
      },
      "NotificationMessage": {
        "description": "The message of the notification. This is derived from the notification type but can be overridden by the user.",
        "required": [
          "title",
          "message"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the notification.",
            "x-order": 1
          },
          "message": {
            "type": "string",
            "description": "The message of the notification.",
            "x-order": 2
          }
        }
      },
      "PushDeviceID": {
        "type": "string",
        "example": "7996e974",
        "description": "A short ID associated with the device that the push subscription is for This is used to identify the device when updating its push subscription later on.\nRealistically, this will be handled as an opaque random string generated on the device side, so the server has no way to correlate  it with any fingerprinting.\nThe recommended way to generate this string in JavaScript is:\n```js crypto.randomUUID().slice(0, 8) ```",
        "x-order": -99
      },
      "PushInfo": {
        "description": "This is returned by the server and contains information that the client would need to subscribe to push notifications.",
        "required": [
          "applicationServerKey"
        ],
        "properties": {
          "applicationServerKey": {
            "type": "string",
            "description": "A Base64-encoded string or ArrayBuffer containing an ECDSA P-256 public key that the push server will use to authenticate your application server. If specified, all messages from your application server must use the VAPID authentication scheme, and include a JWT signed with the corresponding private key. This key IS NOT the same ECDH key that you use to encrypt the data. For more information, see \"Using VAPID with WebPush\"."
          }
        }
      },
      "PushSubscription": {
        "description": "The configuration for a push notification subscription.\nThis is the object that is returned by calling PushSubscription.toJSON(). More information can be found at: https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON",
        "required": [
          "deviceID",
          "endpoint",
          "keys"
        ],
        "properties": {
          "deviceID": {
            "$ref": "#/components/schemas/PushDeviceID"
          },
          "endpoint": {
            "type": "string",
            "description": "The endpoint to send the notification to.",
            "x-order": 1
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the subscription expires. This is the time when the subscription will be automatically deleted by the browser.",
            "x-order": 2,
            "x-go-type-skip-optional-pointer": true
          },
          "keys": {
            "type": "object",
            "description": "The VAPID keys to encrypt the push notification.",
            "required": [
              "p256dh",
              "auth"
            ],
            "properties": {
              "p256dh": {
                "type": "string",
                "description": "An Elliptic curve Diffie–Hellman public key on the P-256 curve (that is, the NIST secp256r1 elliptic curve). The resulting key is an uncompressed point in ANSI X9.62 format.",
                "x-order": 1
              },
              "auth": {
                "type": "string",
                "description": "An authentication secret, as described in Message Encryption for Web Push.",
                "x-order": 2
              }
            },
            "x-order": 3
          }
        }
      },
      "ReturnedNotificationMethods": {
        "properties": {
          "webPush": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnedPushSubscription"
            }
          }
        }
      },
      "ReturnedPushSubscription": {
        "description": "Similar to a [PushSubscription], but specifically for returning to the user. This type contains no secrets.",
        "required": [
          "deviceID",
          "keys"
        ],
        "properties": {
          "deviceID": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PushDeviceID"
              }
            ],
            "x-order": 1
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the subscription expires. This is the time when the subscription will be automatically deleted by the browser.",
            "x-go-type-skip-optional-pointer": true
          },
          "keys": {
            "required": [
              "p256dh"
            ],
            "properties": {
              "p256dh": {
                "type": "string",
                "description": "An Elliptic curve Diffie–Hellman public key on the P-256 curve (that is, the NIST secp256r1 elliptic curve). The resulting key is an uncompressed point in ANSI X9.62 format."
              }
            },
            "x-order": 2
          }
        }
      },
      "CustomNotifications": {
        "description": "Custom notifications that the user can override with. The object keys are the notification types.",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/NotificationMessage"
        }
      },
      "UserSecret": {
        "description": "A secret and unique user identifier. This secret is generated once and never changes. It is used to both authenticate and identify a user, so it should be kept secret.",
        "type": "string",
        "x-go-type": "user.Secret",
        "x-go-type-import": {
          "path": "libdb.so/e2clicker/services/user",
          "name": "userservice"
        }
      },
      "Locale": {
        "description": "A locale identifier.",
        "type": "string",
        "x-go-type": "user.Locale",
        "x-go-type-import": {
          "path": "libdb.so/e2clicker/services/user",
          "name": "userservice"
        }
      },
      "User": {
        "description": "A user of the system.",
        "type": "object",
        "required": [
          "name",
          "locale",
          "hasAvatar"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The user's name",
            "x-order": 1
          },
          "locale": {
            "$ref": "#/components/schemas/Locale",
            "x-order": 2
          },
          "hasAvatar": {
            "type": "boolean",
            "description": "Whether the user has an avatar.",
            "x-order": 3
          }
        }
      },
      "Session": {
        "description": "A session for a user.",
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "lastUsed"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The session identifier",
            "x-order": 1
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the session was created",
            "x-order": 2,
            "x-go-type-skip-optional-pointer": true
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the session was used",
            "x-order": 3,
            "x-go-type-skip-optional-pointer": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the session expires, or null if it never expires",
            "x-order": 4,
            "x-go-type-skip-optional-pointer": true
          }
        }
      }
    },
    "headers": {
      "Retry-After": {
        "description": "If the client should retry the request after a certain amount of time (in seconds), this header will be set. Often times, this will be set if the request is being rate limmmited.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "The request is invalid.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "RateLimitedResponse": {
        "description": "The request has been rate limited.\n",
        "headers": {
          "Retry-After": {
            "$ref": "#/components/headers/Retry-After"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}