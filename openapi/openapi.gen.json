{
  "info": {
    "title": "e2clicker service",
    "version": "0"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message describing the error"
          },
          "details": {
            "description": "Additional details about the error"
          },
          "internal": {
            "type": "boolean",
            "description": "Whether the error is internal"
          },
          "internalCode": {
            "type": "string",
            "description": "An internal code for the error (useless for clients)"
          }
        },
        "required": [
          "message"
        ]
      },
      "DeliveryMethod": {
        "type": "object",
        "required": [
          "id",
          "units",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A short string representing the delivery method. This is what goes into the DeliveryMethod fields.",
            "x-order": 1
          },
          "units": {
            "type": "string",
            "description": "The units of the delivery method.",
            "x-order": 2
          },
          "name": {
            "type": "string",
            "description": "The full name of the delivery method.",
            "x-order": 3
          }
        }
      },
      "DosageSchedule": {
        "type": "object",
        "required": [
          "deliveryMethod",
          "dose",
          "interval"
        ],
        "properties": {
          "deliveryMethod": {
            "type": "string",
            "description": "The delivery method to use.",
            "x-order": 1
          },
          "dose": {
            "type": "number",
            "format": "float",
            "description": "The dosage amount.",
            "x-order": 2
          },
          "interval": {
            "type": "number",
            "format": "double",
            "description": "The interval between doses in days.",
            "x-order": 3
          },
          "concurrence": {
            "type": "integer",
            "description": "The number of estrogen patches on the body at once. Only relevant if delivery method is patch.",
            "x-order": 4
          }
        }
      },
      "DosageHistory": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DosageObservation"
        }
      },
      "DosageObservation": {
        "type": "object",
        "required": [
          "id",
          "deliveryMethod",
          "dose",
          "takenAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the observation.",
            "x-order": 1
          },
          "deliveryMethod": {
            "type": "string",
            "description": "The delivery method used.",
            "x-order": 2
          },
          "dose": {
            "type": "number",
            "format": "float",
            "description": "The dosage amount.",
            "x-order": 3
          },
          "takenAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the dosage was taken.",
            "x-order": 4
          },
          "takenOffAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the dosage was taken off. This is only relevant for patch delivery methods.",
            "x-order": 5
          }
        }
      },
      "UserSecret": {
        "description": "A secret and unique user identifier. This secret is generated once and never changes. It is used to both authenticate and identify a user, so it should be kept secret.",
        "type": "string",
        "x-go-type": "user.Secret",
        "x-go-type-import": {
          "path": "libdb.so/e2clicker/services/user",
          "name": "userservice"
        }
      },
      "Locale": {
        "description": "A locale identifier.",
        "type": "string",
        "x-go-type": "user.Locale",
        "x-go-type-import": {
          "path": "libdb.so/e2clicker/services/user",
          "name": "userservice"
        }
      },
      "User": {
        "description": "A user of the system.",
        "type": "object",
        "required": [
          "name",
          "locale",
          "has_avatar"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The user's name",
            "x-order": 1
          },
          "locale": {
            "$ref": "#/components/schemas/Locale",
            "x-order": 2
          },
          "has_avatar": {
            "type": "boolean",
            "description": "Whether the user has an avatar.",
            "x-order": 3
          }
        }
      },
      "Session": {
        "description": "A session for a user.",
        "type": "object",
        "required": [
          "id",
          "created_at",
          "last_used"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The session identifier",
            "x-order": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the session was created",
            "x-order": 2
          },
          "last_used": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the session was used",
            "x-order": 3
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the session expires, or null if it never expires",
            "x-order": 4
          }
        }
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "The request is invalid.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "openapi": "3.0.0",
  "paths": {
    "/delivery-methods": {
      "get": {
        "summary": "List all available delivery methods",
        "operationId": "deliveryMethods",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved delivery methods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeliveryMethod"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/dosage/schedule": {
      "get": {
        "summary": "Get the user's dosage schedule",
        "operationId": "dosageSchedule",
        "responses": {
          "200": {
            "description": "Successfully retrieved dosage schedule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DosageSchedule"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set the user's dosage schedule",
        "operationId": "setDosageSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DosageSchedule"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully set dosage schedule."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/dosage/history": {
      "get": {
        "summary": "Get the user's dosage history within a time range",
        "operationId": "doseHistory",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "start",
                  "end"
                ],
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date of the history to retrieve."
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date of the history to retrieve."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved dosage history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DosageHistory"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Record a new dosage to the user's history",
        "operationId": "recordDose",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "takenAt"
                ],
                "properties": {
                  "takenAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the dosage was taken."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully recorded dosage.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DosageObservation"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a dosage in the user's history",
        "operationId": "editDose",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DosageObservation"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated dosage."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple dosages from the user's history",
        "operationId": "forgetDoses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dose_ids"
                ],
                "properties": {
                  "dose_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The dose IDs of the observations to delete."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully deleted dosages."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Register a new account",
        "operationId": "register",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name to register with"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object",
                      "required": [
                        "secret"
                      ],
                      "properties": {
                        "secret": {
                          "$ref": "#/components/schemas/UserSecret"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/auth": {
      "post": {
        "summary": "Authenticate a user and obtain a session",
        "operationId": "auth",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "secret"
                ],
                "properties": {
                  "secret": {
                    "$ref": "#/components/schemas/UserSecret"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "User-Agent",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The user agent of the client making the request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "token"
                  ],
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The session token"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/me": {
      "get": {
        "summary": "Get the current user",
        "operationId": "currentUser",
        "responses": {
          "200": {
            "description": "Successfully retrieved the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/me/avatar": {
      "get": {
        "summary": "Get the current user's avatar",
        "operationId": "currentUserAvatar",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's avatar.",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Set the current user's avatar",
        "operationId": "setCurrentUserAvatar",
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully set the user's avatar."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/me/secret": {
      "get": {
        "summary": "Get the current user's secret",
        "operationId": "currentUserSecret",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's secret.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "secret"
                  ],
                  "properties": {
                    "secret": {
                      "$ref": "#/components/schemas/UserSecret"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/me/sessions": {
      "get": {
        "summary": "List the current user's sessions",
        "operationId": "currentUserSessions",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete one of the current user's sessions",
        "operationId": "deleteUserSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The session identifier to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully deleted the user's sessions."
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    }
  }
}
