# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/ba055ca00cbd735dceef4ed7c9db024cd9bfcd1a/schemas/v3.0/schema.json
openapi: 3.0.0

info:
  title: notification
  version: ""

paths:
  /push-info:
    get:
      summary: Get the server's push notification information
      operationId: webPushInfo
      security: []
      responses:
        "200":
          description: >-
            Successfully retrieved the server's push notification information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PushInfo"
        default:
          $ref: "./_base.yml#/components/responses/ErrorResponse"

  /notifications/methods:
    get:
      summary: Get the server's supported notification methods
      operationId: supportedNotificationMethods
      security: []
      responses:
        "200":
          description: >-
            Successfully retrieved the server's notification methods.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationMethodSupports"
        default:
          $ref: "./_base.yml#/components/responses/ErrorResponse"

  /notifications/test:
    post:
      summary: Send a test notification
      operationId: sendTestNotification
      responses:
        "204":
          description: >-
            Successfully sent the test notification.
        default:
          $ref: "./_base.yml#/components/responses/ErrorResponse"

  /notifications/preferences:
    get:
      summary: Get the user's notification preferences
      operationId: userNotificationPreferences
      responses:
        "200":
          description: >-
            Successfully retrieved the user's notification preferences.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPreferences"
        default:
          $ref: "./_base.yml#/components/responses/ErrorResponse"
    put:
      summary: Update the user's notification preferences
      operationId: userUpdateNotificationPreferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/NotificationPreferences"
                - properties:
                    _current:
                      description: >-
                        The current notification preferences.
                        This is used to determine whether the notification
                        method update is still valid.

                        This field is very much optional and is only used to
                        guard against race conditions.

                        TODO: Implement this field.
                      allOf:
                        - $ref: "#/components/schemas/NotificationPreferences"
      responses:
        "204":
          description: >-
            Successfully updated the user's notification methods.
        default:
          $ref: "./_base.yml#/components/responses/ErrorResponse"

  /_ignore/notification/_haha_anything_can_go_here_lol:
    get:
      tags: [ignore]
      responses:
        "500":
          description: >-
            This endpoint is not used and should not be called.
          content:
            application/json:
              schema:
                description: >-
                  These fields aren't used for any API routes.
                  They're just here to make oazapfts happy :)
                  See https://github.com/oazapfts/oazapfts/issues/325.
                anyOf:
                  - $ref: "#/components/schemas/Notification"

components:
  schemas:
    Notification:
      required: [type, message, username]
      properties:
        type:
          $ref: "#/components/schemas/NotificationType"
        message:
          description: >-
            The message of the notification.
          allOf:
            - $ref: "#/components/schemas/NotificationMessage"
          x-order: 2
        username:
          type: string
          description: >-
            The username of the user to send the notification to.
          x-order: 3

    NotificationType:
      type: string
      enum:
        - welcome_message
        - reminder_message
        - account_notice_message
        - web_push_expiring_message
        - test_message
      description: >-
        The type of notification:
          - `welcome_message` is sent to welcome the user. Realistically, it is
            used as a test message.
          - `reminder_message` is sent to remind the user of their hormone dose.
          - `account_notice_message` is sent to notify the user that they need
            to check their account.
          - `web_push_expiring_message` is sent to notify the user that their
            web push subscription is expiring.
          - `test_message` is sent to test your notification settings.
      x-order: -50

    NotificationMessage:
      description: >-
        The message of the notification.
        This is derived from the notification type but can be overridden by
        the user.
      required: [title, message]
      properties:
        title:
          type: string
          description: >-
            The title of the notification.
          x-order: 1
        message:
          type: string
          description: >-
            The message of the notification.
          x-order: 2

    PushDeviceID:
      type: string
      example: 7996e974
      description: >-
        A short ID associated with the device that the push subscription is for
        This is used to identify the device when updating its push subscription
        later on.

        Realistically, this will be handled as an opaque random string
        generated on the device side, so the server has no way to correlate 
        it with any fingerprinting.

        The recommended way to generate this string in JavaScript is:

        ```js
        crypto.randomUUID().slice(0, 8)
        ```
      x-order: -99

    PushInfo:
      description: >-
        This is returned by the server and contains information that the client
        would need to subscribe to push notifications.
      required: [applicationServerKey]
      properties:
        applicationServerKey:
          type: string
          description: >-
            A Base64-encoded string or ArrayBuffer containing an ECDSA P-256
            public key that the push server will use to authenticate your
            application server. If specified, all messages from your application
            server must use the VAPID authentication scheme, and include a JWT
            signed with the corresponding private key. This key IS NOT the same
            ECDH key that you use to encrypt the data. For more information, see
            "Using VAPID with WebPush".

    PushSubscription:
      description: >-
        The configuration for a push notification subscription.

        This is the object that is returned by calling
        PushSubscription.toJSON(). More information can be found at:
        https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON
      required: [deviceID, endpoint, keys]
      properties:
        deviceID:
          $ref: "#/components/schemas/PushDeviceID"
        endpoint:
          type: string
          description: >-
            The endpoint to send the notification to.
          x-order: 1
        expirationTime:
          type: string
          format: date-time
          description: >-
            The time at which the subscription expires. This is the time when
            the subscription will be automatically deleted by the browser.
          x-order: 2
          x-go-type-skip-optional-pointer: true
        keys:
          type: object
          description: >-
            The VAPID keys to encrypt the push notification.
          required: [p256dh, auth]
          properties:
            p256dh:
              type: string
              description: >-
                An Elliptic curve Diffieâ€“Hellman public key on the P-256 curve
                (that is, the NIST secp256r1 elliptic curve). The resulting key
                is an uncompressed point in ANSI X9.62 format.
              x-order: 1
            auth:
              type: string
              description: >-
                An authentication secret, as described in Message Encryption for
                Web Push.
              x-order: 2
          x-order: 3

    EmailSubscription:
      required: [address]
      properties:
        address:
          description: >-
            The email address to send the notification to.
            This email address will appear in the `To` field of the email.
          type: string
          format: email
        name:
          description: >-
            The name of the user to send the email to.
            This name will be used with the email address in the `To` field.
          type: string

    # TODO: gotify
    # TODO: pushover

    NotificationPreferences:
      description: >-
        The user's notification preferences.

        Each key is a notification type and the value is the notification
        configuration for that type. It may be nil if the server does not
        support a particular notification type.
      required: [notificationConfigs]
      properties:
        notificationConfigs:
          properties:
            webPush:
              type: array
              items:
                $ref: "#/components/schemas/PushSubscription"
            email:
              type: array
              items:
                $ref: "#/components/schemas/EmailSubscription"
        customNotifications:
          allOf:
            - $ref: "#/components/schemas/CustomNotifications"
          x-go-type-skip-optional-pointer: true

    NotificationMethodSupports:
      description: >-
        A list of notification methods that the server supports.
      type: array
      items:
        type: string
        enum:
          - webPush
          - email

    CustomNotifications:
      description: >-
        Custom notifications that the user can override with.
        The object keys are the notification types.
      type: object
      additionalProperties:
        $ref: "#/components/schemas/NotificationMessage"
