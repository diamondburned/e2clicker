// Code generated by nixmod2go. DO NOT EDIT.
package e2clickermodule

import (
	"encoding/json"
	"errors"
)

// BackendConfig is the struct type for `config`.
type BackendConfig struct {
	// Enable: whether to enable e2clicker backend.
	Enable  bool   `json:"enable"`
	Package string `json:"package"`
	// API: configuration for the API server.
	API API `json:"api"`
	// Debug: enable debug logging and other debug features.
	Debug bool `json:"debug"`
	// LogFormat: format of the log output.
	LogFormat LogFormat `json:"logFormat"`
	// Notification: configuration for the notification service.
	Notification Notification `json:"notification"`
	// PostgreSQL: configuration for the PostgreSQL database.
	PostgreSQL PostgreSQL `json:"postgresql"`
}

// PostgreSQL is the struct type for `config.postgresql`.
type PostgreSQL struct {
	// DatabaseURI: URI of the database to use.
	DatabaseURI string `json:"databaseURI"`
}

// Notification is the struct type for `config.notification`.
type Notification struct {
	// ClientTimeout: HTTP timeout when making requests to notification servers.
	ClientTimeout string `json:"clientTimeout"`
	// WebPushKeys: path to the file containing the VAPID keys encoded in JSON.
	WebPushKeys *WebPushKeysJSON `json:"webPushKeys"`
}

// API is the struct type for `config.api`.
type API struct {
	// ListenAddress address the API server should listen on.
	ListenAddress string `json:"listenAddress"`
}

// LogFormat is the enum type for `config.logFormat`.
type LogFormat string

const (
	LogFormatColor LogFormat = "color"
	LogFormatJSON  LogFormat = "json"
	LogFormatText  LogFormat = "text"
)

// WebPushKeys describes the `either` type for `config.notification.webPushKeys`.
type WebPushKeys interface {
	isWebPushKeys()
}

// WebPushKeysPath is one of the types that satisfy [WebPushKeys].
type WebPushKeysPath string

// WebPushKeysSubmodule is one of the types that satisfy [WebPushKeys].
type WebPushKeysSubmodule struct {
	// PrivateKey: VAPID private key.
	PrivateKey string `json:"privateKey"`
	// PublicKey: VAPID public key.
	PublicKey string `json:"publicKey"`
}

func (w WebPushKeysPath) isWebPushKeys() {
}
func (w WebPushKeysSubmodule) isWebPushKeys() {
}

// NewWebPushKeysPath constructs a value of type `path` that satisfies [WebPushKeys].
func NewWebPushKeysPath(w string) WebPushKeys {
	return WebPushKeysPath(w)
}

// NewWebPushKeysSubmodule constructs a value of type `submodule` that satisfies [WebPushKeys].
func NewWebPushKeysSubmodule(w struct {
	// PrivateKey: VAPID private key.
	PrivateKey string `json:"privateKey"`
	// PublicKey: VAPID public key.
	PublicKey string `json:"publicKey"`
}) WebPushKeys {
	return WebPushKeysSubmodule(w)
}

// WebPushKeysJSON wraps [WebPushKeys] and implements the json.Unmarshaler interface.
type WebPushKeysJSON struct{ Value WebPushKeys }

// UnmarshalJSON implements the [json.Unmarshaler] interface for [WebPushKeys].
func (w *WebPushKeysJSON) UnmarshalJSON(data []byte) error {
	v, err := unmarshalWebPushKeys(data)
	if err != nil {
		return err
	}
	w.Value = v
	return nil
}

// MarshalJSON implements the [json.Marshaler] interface for [WebPushKeys].
func (w WebPushKeysJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(w.Value)
}

func unmarshalWebPushKeys(data json.RawMessage) (WebPushKeys, error) {

	var v0 string
	if err := json.Unmarshal(data, &v0); err == nil {
		return WebPushKeysPath(v0), nil
	}

	var v1 struct {
		// PrivateKey: VAPID private key.
		PrivateKey string `json:"privateKey"`
		// PublicKey: VAPID public key.
		PublicKey string `json:"publicKey"`
	}
	if err := json.Unmarshal(data, &v1); err == nil {
		return WebPushKeysSubmodule(v1), nil
	}

	return nil, errors.New("failed to unmarshal WebPushKeys: unknown type received")
}
