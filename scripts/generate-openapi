#!/usr/bin/env bash
set -e

main() {
	f=openapi::"${1:-all}"
	if command -v "$f" > /dev/null; then
		"$f"
	else
		echo "Usage: $0 {schema|backend|frontend|docs}" >&2
		exit 1
	fi
}

openapi::schema() {
	tmp=$(mktemp -p openapi ".tmp.XXXXXXXXXX.json.tmp")
	mergeSchema openapi/_base.yml > $tmp
	mergeSchema $tmp openapi/_*.yml > openapi/openapi.gen.json
	rm $tmp
}

mergeSchema() {
	schemas=()
	for path in "$@"; do
		name="$(basename "$path" .yml)"
		if [[ $name == _* ]]; then
			name=${name/_/}
			schema="$(yq e "(.paths // (.paths = {}))[].[].tags = [\"$name\"]" "$path")"
		else
			schema="$(cat "$path")"
		fi
		schemas+=( "$schema" )
	done

	printf '%s\n---\n' "${schemas[@]}" | \
		yq -pauto -ojson ea '. as $item ireduce ({}; . *n+ $item )' -
}

log() {
	echo "$@" >&2
}

openapi::backend() {
	oapi-codegen --config \
		./services/api/openapi/openapi-config.yml \
		./openapi/openapi.gen.json
}

openapi::frontend() {
	pnpx oazapfts --optimistic \
		./openapi/openapi.gen.json \
		./frontend/lib/openapi.gen.ts
}

openapi::docs() {
	pnpx widdershins \
		--code \
		--summary \
		--omitHeader \
		--shallowSchemas \
		./openapi/openapi.gen.json \
		./docs/openapi/README.md
}

main "$@"
