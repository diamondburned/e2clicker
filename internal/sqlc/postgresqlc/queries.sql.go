// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package postgresqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	sqlc "libdb.so/e2clicker/internal/sqlc"
	notificationservice "libdb.so/e2clicker/services/notification"
	userservice "libdb.so/e2clicker/services/user"
)

const addUserDosage = `-- name: AddUserDosage :exec
INSERT INTO dosage_history (user_id, last_dose, taken_at, delivery_method, dose) (
  SELECT $1, $2, now(), delivery_method, dose
  FROM dosage_schedule
  WHERE user_id = $1)
`

type AddUserDosageParams struct {
	UserID   interface{}
	LastDose pgtype.Int8
}

func (q *Queries) AddUserDosage(ctx context.Context, arg AddUserDosageParams) error {
	_, err := q.db.Exec(ctx, addUserDosage, arg.UserID, arg.LastDose)
	return err
}

const createUser = `-- name: CreateUser :one
/*
 * User
 */
INSERT INTO users (user_id, email, passhash, name)
  VALUES ($1, $2, $3, $4)
RETURNING user_id, email, name, locale, registered_at
`

type CreateUserParams struct {
	UserID   sqlc.UserID
	Email    string
	Passhash []byte
	Name     string
}

type CreateUserRow struct {
	UserID       sqlc.UserID
	Email        string
	Name         string
	Locale       userservice.Locale
	RegisteredAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Passhash,
		arg.Name,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.Locale,
		&i.RegisteredAt,
	)
	return i, err
}

const deliveryMethod = `-- name: DeliveryMethod :one
SELECT id, units, name
FROM delivery_methods
WHERE name = $1
`

func (q *Queries) DeliveryMethod(ctx context.Context, name string) (DeliveryMethod, error) {
	row := q.db.QueryRow(ctx, deliveryMethod, name)
	var i DeliveryMethod
	err := row.Scan(&i.ID, &i.Units, &i.Name)
	return i, err
}

const deliveryMethods = `-- name: DeliveryMethods :many
/*
 * Delivery Method
 */
SELECT id, units, name
FROM delivery_methods
`

func (q *Queries) DeliveryMethods(ctx context.Context) ([]DeliveryMethod, error) {
	rows, err := q.db.Query(ctx, deliveryMethods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeliveryMethod
	for rows.Next() {
		var i DeliveryMethod
		if err := rows.Scan(&i.ID, &i.Units, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerSession = `-- name: RegisterSession :exec
/*
 * User Session
 */
INSERT INTO user_sessions (user_id, token, created_at, last_used, user_agent)
  VALUES ($1, $2, now(), now(), $3)
`

type RegisterSessionParams struct {
	UserID    sqlc.UserID
	Token     []byte
	UserAgent pgtype.Text
}

func (q *Queries) RegisterSession(ctx context.Context, arg RegisterSessionParams) error {
	_, err := q.db.Exec(ctx, registerSession, arg.UserID, arg.Token, arg.UserAgent)
	return err
}

const setUserAvatar = `-- name: SetUserAvatar :exec
INSERT INTO user_avatars (user_id, avatar_image, mime_type)
  VALUES ($1, $2, $3)
ON CONFLICT (user_id)
  DO UPDATE SET
    avatar_image = $2, mime_type = $3
`

type SetUserAvatarParams struct {
	UserID      sqlc.UserID
	AvatarImage []byte
	MIMEType    string
}

func (q *Queries) SetUserAvatar(ctx context.Context, arg SetUserAvatarParams) error {
	_, err := q.db.Exec(ctx, setUserAvatar, arg.UserID, arg.AvatarImage, arg.MIMEType)
	return err
}

const setUserCustomNotification = `-- name: SetUserCustomNotification :exec
UPDATE
  users
SET custom_notification = $2
WHERE user_id = $1
`

type SetUserCustomNotificationParams struct {
	UserID             sqlc.UserID
	CustomNotification *notificationservice.Notification
}

func (q *Queries) SetUserCustomNotification(ctx context.Context, arg SetUserCustomNotificationParams) error {
	_, err := q.db.Exec(ctx, setUserCustomNotification, arg.UserID, arg.CustomNotification)
	return err
}

const setUserNotificationService = `-- name: SetUserNotificationService :exec
/*
 * User Notifications
 */
UPDATE
  users
SET notification_service = $2
WHERE user_id = $1
`

type SetUserNotificationServiceParams struct {
	UserID              sqlc.UserID
	NotificationService *notificationservice.NotificationConfigJSON
}

func (q *Queries) SetUserNotificationService(ctx context.Context, arg SetUserNotificationServiceParams) error {
	_, err := q.db.Exec(ctx, setUserNotificationService, arg.UserID, arg.NotificationService)
	return err
}

const updateUserDosageSchedule = `-- name: UpdateUserDosageSchedule :exec
INSERT INTO dosage_schedule (user_id, delivery_method, dose, interval, concurrence)
  VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (user_id)
  DO UPDATE SET
    delivery_method = $2, dose = $3, interval = $4, concurrence = $5
`

type UpdateUserDosageScheduleParams struct {
	UserID         sqlc.UserID
	DeliveryMethod pgtype.Text
	Dose           pgtype.Numeric
	Interval       pgtype.Interval
	Concurrence    pgtype.Numeric
}

func (q *Queries) UpdateUserDosageSchedule(ctx context.Context, arg UpdateUserDosageScheduleParams) error {
	_, err := q.db.Exec(ctx, updateUserDosageSchedule,
		arg.UserID,
		arg.DeliveryMethod,
		arg.Dose,
		arg.Interval,
		arg.Concurrence,
	)
	return err
}

const updateUserEmailPassword = `-- name: UpdateUserEmailPassword :exec
UPDATE
  users
SET email = $2, passhash = $3
WHERE user_id = $1
`

type UpdateUserEmailPasswordParams struct {
	UserID   sqlc.UserID
	Email    string
	Passhash []byte
}

func (q *Queries) UpdateUserEmailPassword(ctx context.Context, arg UpdateUserEmailPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserEmailPassword, arg.UserID, arg.Email, arg.Passhash)
	return err
}

const updateUserLocale = `-- name: UpdateUserLocale :exec
UPDATE
  users
SET locale = $2
WHERE user_id = $1
`

type UpdateUserLocaleParams struct {
	UserID sqlc.UserID
	Locale userservice.Locale
}

func (q *Queries) UpdateUserLocale(ctx context.Context, arg UpdateUserLocaleParams) error {
	_, err := q.db.Exec(ctx, updateUserLocale, arg.UserID, arg.Locale)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE
  users
SET name = $2
WHERE user_id = $1
`

type UpdateUserNameParams struct {
	UserID sqlc.UserID
	Name   string
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.UserID, arg.Name)
	return err
}

const user = `-- name: User :one
SELECT user_id, email, name, locale, registered_at, EXISTS (
    SELECT user_id
    FROM user_avatars
    WHERE user_id = users.user_id) AS has_avatar
FROM users
WHERE users.user_id = $1
`

type UserRow struct {
	UserID       sqlc.UserID
	Email        string
	Name         string
	Locale       userservice.Locale
	RegisteredAt pgtype.Timestamp
	HasAvatar    bool
}

func (q *Queries) User(ctx context.Context, userID sqlc.UserID) (UserRow, error) {
	row := q.db.QueryRow(ctx, user, userID)
	var i UserRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.Locale,
		&i.RegisteredAt,
		&i.HasAvatar,
	)
	return i, err
}

const userAvatar = `-- name: UserAvatar :one
/*
 * User Avatar
 */
SELECT avatar_image, mime_type
FROM user_avatars
WHERE user_id = $1
`

type UserAvatarRow struct {
	AvatarImage []byte
	MIMEType    string
}

func (q *Queries) UserAvatar(ctx context.Context, userID sqlc.UserID) (UserAvatarRow, error) {
	row := q.db.QueryRow(ctx, userAvatar, userID)
	var i UserAvatarRow
	err := row.Scan(&i.AvatarImage, &i.MIMEType)
	return i, err
}

const userDosageHistory = `-- name: UserDosageHistory :many
SELECT dose_id, last_dose, user_id, delivery_method, dose, taken_at, taken_off_at
FROM dosage_history
WHERE user_id = $1
  AND taken_at >= $2
ORDER BY dose_id DESC
LIMIT $3
`

type UserDosageHistoryParams struct {
	UserID  interface{}
	TakenAt pgtype.Timestamptz
	Limit   int32
}

func (q *Queries) UserDosageHistory(ctx context.Context, arg UserDosageHistoryParams) ([]DosageHistory, error) {
	rows, err := q.db.Query(ctx, userDosageHistory, arg.UserID, arg.TakenAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DosageHistory
	for rows.Next() {
		var i DosageHistory
		if err := rows.Scan(
			&i.DoseID,
			&i.LastDose,
			&i.UserID,
			&i.DeliveryMethod,
			&i.Dose,
			&i.TakenAt,
			&i.TakenOffAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userDosageSchedule = `-- name: UserDosageSchedule :exec
/*
 * Dosage and dosage-related
 */
SELECT user_id, delivery_method, dose, interval, concurrence
FROM dosage_schedule
WHERE user_id = $1
`

func (q *Queries) UserDosageSchedule(ctx context.Context, userID sqlc.UserID) error {
	_, err := q.db.Exec(ctx, userDosageSchedule, userID)
	return err
}

const userPasswordHashFromEmail = `-- name: UserPasswordHashFromEmail :one
SELECT user_id, passhash
FROM users
WHERE email = $1
`

type UserPasswordHashFromEmailRow struct {
	UserID   sqlc.UserID
	Passhash []byte
}

func (q *Queries) UserPasswordHashFromEmail(ctx context.Context, email string) (UserPasswordHashFromEmailRow, error) {
	row := q.db.QueryRow(ctx, userPasswordHashFromEmail, email)
	var i UserPasswordHashFromEmailRow
	err := row.Scan(&i.UserID, &i.Passhash)
	return i, err
}

const validateSession = `-- name: ValidateSession :one
UPDATE
  user_sessions
SET last_used = now()
FROM users
WHERE user_sessions.user_id = users.user_id
  AND token = $1
  AND last_used > now() - '7 days'::interval
RETURNING users.user_id
`

func (q *Queries) ValidateSession(ctx context.Context, token []byte) (sqlc.UserID, error) {
	row := q.db.QueryRow(ctx, validateSession, token)
	var user_id sqlc.UserID
	err := row.Scan(&user_id)
	return user_id, err
}

const version = `-- name: Version :one
/*
 * Meta
 */
SELECT v
FROM meta
`

func (q *Queries) Version(ctx context.Context) (int16, error) {
	row := q.db.QueryRow(ctx, version)
	var v int16
	err := row.Scan(&v)
	return v, err
}
